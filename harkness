#!/bin/bash

# support methods
function error () {
   printf "error: %s\n" "$*"
   return 1
}

# assert
function assertEquals () {
   (( HARKNESS_TEST_NUM_ASSERT++ ))
   (( HARKNESS_TEST_TOTAL_ASSERT++ ))

   local name="$1"
   local expected="$2"
   local actual="${3:-}"

   local result
   local equals
   if [ "$expected" == "$actual" ]; then
      (( HARKNESS_TEST_NUM_ASSERT_PASSED++ ))
      (( HARKNESS_TEST_TOTAL_ASSERT_PASSED++ ))

      result="success"
      equals="=="
   else
      result="failure"
      equals="!="
   fi

   printf "   %-11s" "$result --"
   printf "%-20s" "$name:"
   printf "%s\n" "'$expected' $equals '$actual'"
}


# test
function harkness_test_init () {
   printf "TEST: $1\n"

   HARKNESS_TEST_RESULT=0
   HARKNESS_TEST_NUM_ASSERT=0
   HARKNESS_TEST_NUM_ASSERT_PASSED=0
}

function harkness_test_run () {
   local test_name="$@"

   if ! [[ "$test_name" =~ ^[a-zA-Z0-9_]+$ ]]; then
      printf "   "; error "test name cannot contain non-alphanumeric characters"
      HARKNESS_TEST_RESULT=1
      return 1
   fi

   if [ "$(type -t "$test_name")" != "function" ]; then
      printf "   "; error "test function '$test_name' could not be found"
      HARKNESS_TEST_RESULT=1
      return 1
   fi

   "$@"
   HARKNESS_TEST_RESULT=$?
}

function harkness_test_report () {
   printf "   PASSED: $HARKNESS_TEST_NUM_ASSERT_PASSED/$HARKNESS_TEST_NUM_ASSERT assertions"
   printf "\n\n"
}


# suite
function harkness_suite_init () {
   printf "HARKNESS TEST SUITE\n"
   printf "\n"

   HARKNESS_TEST_NUM_ASSERT_PASSED=0
   HARKNESS_TEST_NUM_ASSERT=0

   HARKNESS_TEST_TOTAL_ASSERT_PASSED=0
   HARKNESS_TEST_TOTAL_ASSERT=0

   HARKNESS_SUITE_TOTAL_TEST_PASSED=0
   HARKNESS_SUITE_TOTAL_TEST=0
}

function harkness_suite_report () {
   printf "SUMMARY\n"
   printf "   ASSERTS PASSED: $HARKNESS_TEST_TOTAL_ASSERT_PASSED/$HARKNESS_TEST_TOTAL_ASSERT\n"
   printf "   TESTS PASSED: $HARKNESS_SUITE_TOTAL_TEST_PASSED/$HARKNESS_SUITE_TOTAL_TEST\n"
}

function harkness_suite_end () {
   HARKNESS_COMBO_BREAKER=true
}

# harness
function harkness_update_counters () {
   (( HARKNESS_SUITE_TOTAL_TEST++))

   if (( HARKNESS_TEST_RESULT == 0 )) && (( $HARKNESS_TEST_NUM_ASSERT_PASSED == $HARKNESS_TEST_NUM_ASSERT )); then
      (( HARKNESS_SUITE_TOTAL_TEST_PASSED++ ))
   fi
}

function harkness_run_tests () {
   [ -n "$HARKNESS_COMBO_BREAKER" ] && return

   harkness_suite_init

   local harkness_test
   for harkness_test in "${HARKNESS_TESTS[@]}"; do 
      harkness_test_init "$harkness_test"
      harkness_test_run "$harkness_test"
      harkness_test_report
      harkness_update_counters
   done

   harkness_suite_report
   harkness_suite_end
}

function run () {
   if (( $# == 0 )); then
      error "a testfile was not specified"
      exit 1
   fi

   if (( $# > 1 )); then
      error "too many arguments"
      exit 1
   fi

   if [ ! -f "$1" ]; then
      error "'$1' is not a file"
      exit 1
   fi

   source "$1"
   if [ -z "$HARKNESS_TESTS" ]; then
      error "no tests were specified in \$HARKNESS_TESTS"
      exit 1
   fi

   harkness_run_tests
}

if [ "$0" = "${BASH_SOURCE[0]}" ]; then
   run "$@"
fi
